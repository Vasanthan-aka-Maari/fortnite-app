{"version":3,"sources":["Nav.jsx","About.jsx","Card.jsx","Shop.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","textDecoration","fontWeight","style","position","width","objectFit","src","alt","className","to","About","color","Card","name","image","description","rating","type","Shop","useEffect","fetchData","useState","items","setItems","a","fetch","data","json","console","log","map","item","images","icon","ratings","avgStars","App","backgroundColor","height","textAlign","text","top","left","transform","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAsCeA,MAnCf,WACE,IAAMC,EAAW,CACfC,eAAgB,OAChBC,WAAY,OAUd,OACE,yBAAKC,MALQ,CACbC,SAAU,WAKR,yBACED,MAXW,CACfE,MAAO,KACPC,UAAW,WAUPC,IAAI,oJACJC,IAAI,KAEN,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAMN,MAAOH,EAAUU,GAAG,KACxB,qCAEF,kBAAC,IAAD,CAAMP,MAAOH,EAAUU,GAAG,UACxB,sCAEF,kBAAC,IAAD,CAAMP,MAAOH,EAAUU,GAAG,SACxB,wC,MCbKC,MAdf,WACE,OACE,yBAAKF,UAAU,SACb,6FACkE,IAChE,kBAAC,IAAD,CAAMC,GAAG,QAAQP,MAAO,CAAES,MAAO,OAAQX,eAAgB,SAAzD,QAEQ,IAJV,QAKO,6BALP,wB,uCCgBSY,MApBf,YAA2D,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAChD,OACE,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAaK,GAC3B,wBAAIL,UAAU,oBAAd,qBACuBO,GAEvB,wBAAIP,UAAU,aAAd,SAAiCS,GACjC,wBAAIT,UAAU,eAAd,WAAqCQ,IAEvC,6BACE,yBAAKV,IAAKQ,EAAOP,IAAKM,EAAML,UAAU,mB,MCuBjCU,MAnCf,WACEC,qBAAU,WACRC,MACC,IAHW,MAKYC,mBAAS,IALrB,mBAKPC,EALO,KAKAC,EALA,KAORH,EAAS,uCAAG,8BAAAI,EAAA,sEACGC,MACjB,uDAFc,cACVC,EADU,gBAIIA,EAAKC,OAJT,OAIVL,EAJU,OAKhBM,QAAQC,IAAIP,GACZC,EAASD,EAAMI,MANC,2CAAH,qDAUf,OAFAE,QAAQC,IAAIP,EAAMI,MAGhB,yBAAKlB,UAAU,QACZc,EAAMQ,KAAI,SAACC,GACV,OACE,kBAAC,EAAD,CACElB,KAAMkB,EAAKA,KAAKlB,KAChBC,MAAOiB,EAAKA,KAAKC,OAAOC,KACxBlB,YAAagB,EAAKA,KAAKhB,YACvBC,OAAQe,EAAKA,KAAKG,QAAQC,SAC1BlB,KAAMc,EAAKA,KAAKd,Y,OCabmB,MApCf,WACE,IAAMlC,EAAQ,CACZmC,gBAAiB,QACjB1B,MAAO,QACP2B,OAAQ,OACRC,UAAW,UAEPC,EAAO,CACXrC,SAAU,WACVsC,IAAK,MACLC,KAAM,MACNC,UAAW,wBAWb,OACE,kBAAC,IAAD,KACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAK,IAAIC,UAdX,WACX,OACE,yBAAK3C,MAAOA,GACV,yBAAKA,MAAOsC,GACV,oEAUiCM,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWnC,IAChC,kBAAC,IAAD,CAAOkC,KAAK,QAAQC,UAAW3B,QCxBrB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.82be07c7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  const navStyle = {\n    textDecoration: \"none\",\n    fontWeight: \"700\",\n  };\n  const imgStyle = {\n    width: \"5%\",\n    objectFit: \"contain\",\n  };\n  const navbar = {\n    position: \"sticky\",\n  };\n\n  return (\n    <nav style={navbar}>\n      <img\n        style={imgStyle}\n        src=\"https://purepng.com/public/uploads/medium/purepng.com-fortnite-logo-black-and-whitefortnitefortnite-battle-royalegameslogos-6915227091711c2gx.png\"\n        alt=\"\"\n      />\n      <ul className=\"nav-links\">\n        <Link style={navStyle} to=\"/\">\n          <li>Home</li>\n        </Link>\n        <Link style={navStyle} to=\"/about\">\n          <li>About</li>\n        </Link>\n        <Link style={navStyle} to=\"/shop\">\n          <li>Shop</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./About.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction About() {\n  return (\n    <div className=\"About\">\n      <p>\n        To know about the new upgrades in fornite please take a look at{\" \"}\n        <Link to=\"/shop\" style={{ color: \"#fff\", textDecoration: \"none\" }}>\n          SHOP\n        </Link>{\" \"}\n        page <br /> to view new items\n      </p>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport \"./Card.css\";\n\nfunction Card({ name, image, description, rating, type }) {\n  return (\n    <div className=\"card-wrapper\">\n      <div className=\"card\">\n        <div className=\"card-info\">\n          <h1 className=\"card-name\">{name}</h1>\n          <h3 className=\"card-description\">\n            Description: &nbsp; {description}\n          </h3>\n          <h3 className=\"card-type\">Type: {type}</h3>\n          <h3 className=\"card-rating\">Rating: {rating}</h3>\n        </div>\n        <div>\n          <img src={image} alt={name} className=\"card-image\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport \"./Shop.css\";\n\nfunction Shop() {\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const [items, setItems] = useState([]);\n\n  const fetchData = async () => {\n    const data = await fetch(\n      \"https://fortnite-api.theapinetwork.com/upcoming/get\"\n    );\n    const items = await data.json();\n    console.log(items);\n    setItems(items.data);\n  };\n  console.log(items.data);\n\n  return (\n    <div className=\"shop\">\n      {items.map((item) => {\n        return (\n          <Card\n            name={item.item.name}\n            image={item.item.images.icon}\n            description={item.item.description}\n            rating={item.item.ratings.avgStars}\n            type={item.item.type}\n          />\n          // <h3>{item.item.name}</h3>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Shop;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport About from \"./About\";\nimport Shop from \"./Shop\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const style = {\n    backgroundColor: \"black\",\n    color: \"white\",\n    height: \"90vh\",\n    textAlign: \"center\",\n  };\n  const text = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%,-50%)\",\n  };\n  const home = () => {\n    return (\n      <div style={style}>\n        <div style={text}>\n          <h1>Welcome, view about to know more.</h1>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={home} exact />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop\" component={Shop} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}